// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model.Configuration;

#nullable disable

namespace Model.Migrations
{
    [DbContext(typeof(ModelDbContext))]
    partial class ModelDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Model.Entities.Auth.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ROLE_ID");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("IDENTIFIER");

                    b.HasKey("Id");

                    b.HasIndex("Identifier")
                        .IsUnique();

                    b.ToTable("ROLES");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Administrator",
                            Identifier = "Admin"
                        });
                });

            modelBuilder.Entity("Model.Entities.Auth.RoleClaim", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("ROLE_ID");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("USER_HAS_ROLES_JT");
                });

            modelBuilder.Entity("Model.Entities.Auth.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("PASSWORD_HASH");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("USERNAME");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("USERS");
                });

            modelBuilder.Entity("Model.Entities.Things.Electronics.Cables.CableEnd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CABLE_END_ID");

                    b.Property<string>("ConnectionTypeId")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CONNECTION_TYPE");

                    b.Property<sbyte>("IsMale")
                        .HasColumnType("TINYINT")
                        .HasColumnName("IS_MALE");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionTypeId");

                    b.ToTable("CABLE_ENDS");
                });

            modelBuilder.Entity("Model.Entities.Things.Electronics.Cables.CableHasEnds", b =>
                {
                    b.Property<int>("CableId")
                        .HasColumnType("int")
                        .HasColumnName("CABLE_ID");

                    b.Property<int>("CableEndId")
                        .HasColumnType("int")
                        .HasColumnName("END_ID");

                    b.HasKey("CableId", "CableEndId");

                    b.HasIndex("CableEndId");

                    b.ToTable("CABLE_HAS_ENDS_JT");
                });

            modelBuilder.Entity("Model.Entities.Things.Electronics.Cables.ConnectionType", b =>
                {
                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("VALUE");

                    b.HasKey("Value");

                    b.ToTable("E_CONNECTION_TYPE");
                });

            modelBuilder.Entity("Model.Entities.Things.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PLACE_ID");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("PlaceColumn")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PLACE_COLUMN");

                    b.Property<string>("PlaceRow")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PLACE_ROW");

                    b.Property<string>("Room")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ROOM");

                    b.HasKey("Id");

                    b.ToTable("PLACES");
                });

            modelBuilder.Entity("Model.Entities.Things.Thing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("THING_ID");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int")
                        .HasColumnName("PLACE_ID");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("THINGS");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Model.Entities.Things.Electronics.Electronic", b =>
                {
                    b.HasBaseType("Model.Entities.Things.Thing");

                    b.ToTable("ELECTRONICS");
                });

            modelBuilder.Entity("Model.Entities.Things.Electronics.Cables.Cable", b =>
                {
                    b.HasBaseType("Model.Entities.Things.Electronics.Electronic");

                    b.Property<int>("Length")
                        .HasColumnType("int")
                        .HasColumnName("LENGTH");

                    b.ToTable("CABLES");
                });

            modelBuilder.Entity("Model.Entities.Things.Electronics.Cables.Adapters.Adapter", b =>
                {
                    b.HasBaseType("Model.Entities.Things.Electronics.Cables.Cable");

                    b.ToTable("ADAPTERS");
                });

            modelBuilder.Entity("Model.Entities.Things.Electronics.Cables.AudioCables.AudioCable", b =>
                {
                    b.HasBaseType("Model.Entities.Things.Electronics.Cables.Cable");

                    b.ToTable("AUDIO_CABLES");
                });

            modelBuilder.Entity("Model.Entities.Things.Electronics.Cables.ChargingCables.ChargingCable", b =>
                {
                    b.HasBaseType("Model.Entities.Things.Electronics.Cables.Cable");

                    b.Property<float?>("Ampere")
                        .HasColumnType("float")
                        .HasColumnName("AMPERE");

                    b.Property<float?>("Voltage")
                        .HasColumnType("float")
                        .HasColumnName("VOLTAGE");

                    b.Property<float?>("Watt")
                        .HasColumnType("float")
                        .HasColumnName("WATT");

                    b.ToTable("CHARGING_CABLES");
                });

            modelBuilder.Entity("Model.Entities.Things.Electronics.Cables.Hubs.Hub", b =>
                {
                    b.HasBaseType("Model.Entities.Things.Electronics.Cables.Cable");

                    b.ToTable("HUBS");
                });

            modelBuilder.Entity("Model.Entities.Things.Electronics.Cables.SpecialCables.SpecialCable", b =>
                {
                    b.HasBaseType("Model.Entities.Things.Electronics.Cables.Cable");

                    b.ToTable("SPECIAL_CABLES");
                });

            modelBuilder.Entity("Model.Entities.Things.Electronics.Cables.TrunkCables.TrunkCable", b =>
                {
                    b.HasBaseType("Model.Entities.Things.Electronics.Cables.Cable");

                    b.ToTable("TRUNK_CABLES");
                });

            modelBuilder.Entity("Model.Entities.Things.Electronics.Cables.VideoCables.VideoCable", b =>
                {
                    b.HasBaseType("Model.Entities.Things.Electronics.Cables.Cable");

                    b.ToTable("VIDEO_CABLES");
                });

            modelBuilder.Entity("Model.Entities.Auth.RoleClaim", b =>
                {
                    b.HasOne("Model.Entities.Auth.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Auth.User", "User")
                        .WithMany("RoleClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Entities.Things.Electronics.Cables.CableEnd", b =>
                {
                    b.HasOne("Model.Entities.Things.Electronics.Cables.ConnectionType", "ConnectionType")
                        .WithMany()
                        .HasForeignKey("ConnectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectionType");
                });

            modelBuilder.Entity("Model.Entities.Things.Electronics.Cables.CableHasEnds", b =>
                {
                    b.HasOne("Model.Entities.Things.Electronics.Cables.CableEnd", "CableEnd")
                        .WithMany()
                        .HasForeignKey("CableEndId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Things.Electronics.Cables.Cable", "Cable")
                        .WithMany()
                        .HasForeignKey("CableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cable");

                    b.Navigation("CableEnd");
                });

            modelBuilder.Entity("Model.Entities.Things.Thing", b =>
                {
                    b.HasOne("Model.Entities.Things.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Model.Entities.Things.Electronics.Electronic", b =>
                {
                    b.HasOne("Model.Entities.Things.Thing", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Things.Electronics.Electronic", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Things.Electronics.Cables.Cable", b =>
                {
                    b.HasOne("Model.Entities.Things.Electronics.Electronic", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Things.Electronics.Cables.Cable", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Things.Electronics.Cables.Adapters.Adapter", b =>
                {
                    b.HasOne("Model.Entities.Things.Electronics.Cables.Cable", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Things.Electronics.Cables.Adapters.Adapter", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Things.Electronics.Cables.AudioCables.AudioCable", b =>
                {
                    b.HasOne("Model.Entities.Things.Electronics.Cables.Cable", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Things.Electronics.Cables.AudioCables.AudioCable", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Things.Electronics.Cables.ChargingCables.ChargingCable", b =>
                {
                    b.HasOne("Model.Entities.Things.Electronics.Cables.Cable", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Things.Electronics.Cables.ChargingCables.ChargingCable", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Things.Electronics.Cables.Hubs.Hub", b =>
                {
                    b.HasOne("Model.Entities.Things.Electronics.Cables.Cable", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Things.Electronics.Cables.Hubs.Hub", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Things.Electronics.Cables.SpecialCables.SpecialCable", b =>
                {
                    b.HasOne("Model.Entities.Things.Electronics.Cables.Cable", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Things.Electronics.Cables.SpecialCables.SpecialCable", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Things.Electronics.Cables.TrunkCables.TrunkCable", b =>
                {
                    b.HasOne("Model.Entities.Things.Electronics.Cables.Cable", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Things.Electronics.Cables.TrunkCables.TrunkCable", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Things.Electronics.Cables.VideoCables.VideoCable", b =>
                {
                    b.HasOne("Model.Entities.Things.Electronics.Cables.Cable", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Things.Electronics.Cables.VideoCables.VideoCable", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Auth.Role", b =>
                {
                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("Model.Entities.Auth.User", b =>
                {
                    b.Navigation("RoleClaims");
                });
#pragma warning restore 612, 618
        }
    }
}
